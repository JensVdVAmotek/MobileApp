{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePopover = void 0;\nvar react_1 = require(\"react\");\nvar react_native_1 = require(\"react-native-web/dist/index\");\nfunction usePopover() {\n  var calculateStatusBar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var touchableRef = (0, react_1.useRef)(null);\n  var _ref = (0, react_1.useState)({\n      showPopover: false,\n      popoverAnchor: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      }\n    }),\n    _ref2 = _slicedToArray(_ref, 2),\n    _ref2$ = _ref2[0],\n    showPopover = _ref2$.showPopover,\n    popoverAnchor = _ref2$.popoverAnchor,\n    setState = _ref2[1];\n  var result = (0, react_1.useMemo)(function () {\n    var openPopover = function openPopover() {\n      var handle = (0, react_native_1.findNodeHandle)(touchableRef.current);\n      if (handle) {\n        react_native_1.NativeModules.UIManager.measure(handle, onTouchableMeasured);\n      }\n    };\n    var onTouchableMeasured = function onTouchableMeasured(_x0, _y0, width, height, x, y) {\n      var _a;\n      var dimensions = react_native_1.Dimensions.get('window');\n      setState({\n        showPopover: true,\n        popoverAnchor: {\n          x: react_native_1.I18nManager.isRTL ? dimensions.width - x : x,\n          y: y - (calculateStatusBar ? (_a = react_native_1.StatusBar.currentHeight) !== null && _a !== void 0 ? _a : 0 : 0),\n          width: width,\n          height: height\n        }\n      });\n    };\n    var closePopover = function closePopover() {\n      return setState(function (s) {\n        return Object.assign(Object.assign({}, s), {\n          showPopover: false\n        });\n      });\n    };\n    return {\n      openPopover: openPopover,\n      closePopover: closePopover,\n      touchableRef: touchableRef,\n      popoverVisible: showPopover,\n      popoverAnchorRect: popoverAnchor\n    };\n  }, [calculateStatusBar, touchableRef, showPopover, popoverAnchor, setState]);\n  var openPopover = result.openPopover;\n  (0, react_1.useEffect)(function () {\n    var onOrientationChange = function onOrientationChange() {\n      if (showPopover) {\n        requestAnimationFrame(openPopover);\n      }\n    };\n    var listener = react_native_1.Dimensions.addEventListener('change', onOrientationChange);\n    return function () {\n      listener.remove();\n    };\n  }, [showPopover, openPopover]);\n  return result;\n}\nexports.usePopover = usePopover;","map":{"version":3,"names":["react_1","require","react_native_1","usePopover","calculateStatusBar","arguments","length","undefined","touchableRef","useRef","_ref","useState","showPopover","popoverAnchor","x","y","width","height","_ref2","_slicedToArray","_ref2$","setState","result","useMemo","openPopover","handle","findNodeHandle","current","NativeModules","UIManager","measure","onTouchableMeasured","_x0","_y0","dimensions","Dimensions","get","I18nManager","isRTL","_a","StatusBar","currentHeight","closePopover","s","Object","assign","popoverVisible","popoverAnchorRect","useEffect","onOrientationChange","requestAnimationFrame","listener","addEventListener","remove","exports"],"sources":["/Users/jensvandevelde/Desktop/MobileApp/node_modules/react-native-modal-popover/src/usePopover.ts"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  Dimensions,\n  findNodeHandle,\n  I18nManager,\n  MeasureOnSuccessCallback,\n  NativeModules,\n  StatusBar,\n} from 'react-native';\nimport { Rect } from './PopoverGeometry';\n\ninterface State {\n  showPopover: boolean;\n  popoverAnchor: Rect;\n}\n\nexport interface UsePopoverHook {\n  openPopover: () => void;\n  closePopover: () => void;\n  popoverVisible: boolean;\n  touchableRef: React.MutableRefObject<any>;\n  popoverAnchorRect: Rect;\n}\n\nexport function usePopover(calculateStatusBar = false): UsePopoverHook {\n  const touchableRef = useRef<any>(null);\n\n  const [{ showPopover, popoverAnchor }, setState] = useState<State>({\n    showPopover: false,\n    popoverAnchor: { x: 0, y: 0, width: 0, height: 0 },\n  });\n\n  const result = useMemo(() => {\n    const openPopover = () => {\n      const handle = findNodeHandle(touchableRef.current);\n      if (handle) {\n        NativeModules.UIManager.measure(handle, onTouchableMeasured);\n      }\n    };\n\n    const onTouchableMeasured: MeasureOnSuccessCallback = (\n      _x0,\n      _y0,\n      width,\n      height,\n      x,\n      y,\n    ) => {\n      const dimensions = Dimensions.get('window');\n      setState({\n        showPopover: true,\n        popoverAnchor: {\n          x: I18nManager.isRTL ? dimensions.width - x : x,\n          y: y - (calculateStatusBar ? StatusBar.currentHeight ?? 0 : 0),\n          width,\n          height,\n        },\n      });\n    };\n\n    const closePopover = () => setState((s) => ({ ...s, showPopover: false }));\n\n    return {\n      openPopover,\n      closePopover,\n      touchableRef,\n      popoverVisible: showPopover,\n      popoverAnchorRect: popoverAnchor,\n    };\n  }, [calculateStatusBar, touchableRef, showPopover, popoverAnchor, setState]);\n\n  const { openPopover } = result;\n\n  useEffect(() => {\n    const onOrientationChange = () => {\n      if (showPopover) {\n        // Need to measure touchable and setFrom rect on popover again\n        requestAnimationFrame(openPopover);\n      }\n    };\n    const listener = Dimensions.addEventListener('change', onOrientationChange);\n    return () => {\n      listener.remove();\n    };\n  }, [showPopover, openPopover]);\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}