{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, getNextHandlerTag } from \"./handlersRegistry\";\nimport { filterConfig, findNodeHandle } from \"./gestureHandlerCommon\";\nvar UIManagerAny = UIManager;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = _defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({}, State.UNDETERMINED, undefined), State.BEGAN, 'onBegan'), State.FAILED, 'onFailed'), State.CANCELLED, 'onCancelled'), State.ACTIVE, 'onActivated'), State.END, 'onEnded');\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _callSuper(this, Handler, [props]);\n      _defineProperty(_this, \"handlerTag\", void 0);\n      _defineProperty(_this, \"config\", void 0);\n      _defineProperty(_this, \"propsRef\", void 0);\n      _defineProperty(_this, \"viewNode\", void 0);\n      _defineProperty(_this, \"viewTag\", void 0);\n      _defineProperty(_this, \"updateEnqueued\", null);\n      _defineProperty(_this, \"inspectorToggleListener\", void 0);\n      _defineProperty(_this, \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(_this, \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(_this, \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(_this, \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty(_this, \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false);\n        }\n      });\n      _defineProperty(_this, \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n      _this.handlerTag = getNextHandlerTag();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _inherits(Handler, _React$Component);\n    return _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update();\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n            _this2.update();\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n          onGestureEvent = _this$props5.onGestureEvent,\n          onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n          onHandlerStateChange = _this$props6.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","Touchable","UIManager","DeviceEventEmitter","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","UIManagerAny","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","_objectSpread","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","OS","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_defineProperty2","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck","_callSuper","_defineProperty","event","nativeEvent","handlerTag","_this$props$onGesture","_this$props","onGestureEvent","_this$props$onGesture2","_this$props2","_this$props$onHandler","_this$props3","onHandlerStateChange","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","_inherits","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","concat","_toConsumableArray","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","_this$props5","gestureStateEventHandler","_this$props6","events","grandChildren","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["/Users/jensvandevelde/Desktop/MobileApp/node_modules/@ant-design/react-native/node_modules/react-native-gesture-handler/lib/module/handlers/createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}