{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeGeometry = void 0;\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar computeGeometry = function computeGeometry(contentSize, placement, fromRect, displayArea, arrowSize) {\n  var effectiveArrowSize = getArrowSize(arrowSize, placement);\n  switch (placement) {\n    case 'top':\n      return computeTopGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'bottom':\n      return computeBottomGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'start':\n      return computeStartGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'end':\n      return computeEndGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    default:\n      return computeAutoGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n  }\n};\nexports.computeGeometry = computeGeometry;\nvar getArrowSize = function getArrowSize(size, placement) {\n  if (placement === 'start' || placement === 'end') {\n    return {\n      width: size.height,\n      height: size.width\n    };\n  }\n  return size;\n};\nvar computeTopGeometry = function computeTopGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x + (fromRect.width - contentSize.width) / 2 - (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n    y: fromRect.y - contentSize.height - arrowSize.height\n  };\n  var anchor = {\n    x: fromRect.x + fromRect.width / 2 * (react_native_1.I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'top'\n  };\n};\nvar computeBottomGeometry = function computeBottomGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x + (fromRect.width - contentSize.width) / 2 - (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n    y: fromRect.y + fromRect.height + arrowSize.height\n  };\n  var anchor = {\n    x: fromRect.x + fromRect.width / 2 * (react_native_1.I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y + fromRect.height\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'bottom'\n  };\n};\nvar computeStartGeometry = function computeStartGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: fromRect.x - contentSize.width - arrowSize.width - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height))\n  };\n  var anchor = {\n    x: fromRect.x - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: fromRect.y + fromRect.height - contentSize.height / 2\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'start'\n  };\n};\nvar computeEndGeometry = function computeEndGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: fromRect.x + fromRect.width + arrowSize.width - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height))\n  };\n  var anchor = {\n    x: fromRect.x + (react_native_1.I18nManager.isRTL ? 0 : fromRect.width),\n    y: fromRect.y + fromRect.height - contentSize.height / 2\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'end'\n  };\n};\nvar computeAutoGeometry = function computeAutoGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var geom = null;\n  var placements = ['start', 'end', 'top', 'bottom'];\n  for (var i = 0; i < 4; i += 1) {\n    var placement = placements[i];\n    geom = (0, exports.computeGeometry)(contentSize, placement, fromRect, displayArea, arrowSize);\n    var _geom = geom,\n      origin = _geom.origin;\n    if (origin.x >= displayArea.x && origin.x <= displayArea.x + displayArea.width - contentSize.width && origin.y >= displayArea.y && origin.y <= displayArea.y + displayArea.height - contentSize.height) {\n      break;\n    }\n  }\n  return geom;\n};","map":{"version":3,"names":["computeGeometry","contentSize","placement","fromRect","displayArea","arrowSize","effectiveArrowSize","getArrowSize","computeTopGeometry","computeBottomGeometry","computeStartGeometry","computeEndGeometry","computeAutoGeometry","exports","size","width","height","origin","x","Math","min","max","react_native_1","I18nManager","isRTL","y","anchor","geom","placements","i","_geom"],"sources":["/Users/jensvandevelde/Desktop/MobileApp/node_modules/react-native-modal-popover/src/PopoverGeometry.ts"],"sourcesContent":["import { I18nManager } from 'react-native';\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport type Placement = 'top' | 'end' | 'bottom' | 'start';\n\nexport interface Geometry {\n  origin: Point;\n  anchor: Point;\n  placement: Placement;\n}\n\ntype ComputeGeometry = (\n  displayArea: Rect,\n  fromRect: Rect,\n  contentSize: Size,\n  arrowSize: Size,\n) => Geometry;\n\nexport const computeGeometry = (\n  contentSize: Size,\n  placement: Placement | 'auto',\n  fromRect: Rect,\n  displayArea: Rect,\n  arrowSize: Size,\n): Geometry => {\n  const effectiveArrowSize = getArrowSize(arrowSize, placement);\n\n  switch (placement) {\n    case 'top':\n      return computeTopGeometry(\n        displayArea,\n        fromRect,\n        contentSize,\n        effectiveArrowSize,\n      );\n    case 'bottom':\n      return computeBottomGeometry(\n        displayArea,\n        fromRect,\n        contentSize,\n        effectiveArrowSize,\n      );\n    case 'start':\n      return computeStartGeometry(\n        displayArea,\n        fromRect,\n        contentSize,\n        effectiveArrowSize,\n      );\n    case 'end':\n      return computeEndGeometry(\n        displayArea,\n        fromRect,\n        contentSize,\n        effectiveArrowSize,\n      );\n    default:\n      return computeAutoGeometry(\n        displayArea,\n        fromRect,\n        contentSize,\n        effectiveArrowSize,\n      );\n  }\n};\n\nconst getArrowSize = (size: Size, placement: Placement | 'auto'): Size => {\n  if (placement === 'start' || placement === 'end') {\n    return { width: size.height, height: size.width };\n  }\n  return size;\n};\n\nconst computeTopGeometry: ComputeGeometry = (\n  displayArea,\n  fromRect,\n  contentSize,\n  arrowSize,\n) => {\n  const origin = {\n    x: Math.min(\n      displayArea.x + displayArea.width - contentSize.width,\n      Math.max(\n        displayArea.x,\n        fromRect.x +\n          (fromRect.width - contentSize.width) / 2 -\n          (I18nManager.isRTL ? fromRect.width : 0),\n      ),\n    ),\n    y: fromRect.y - contentSize.height - arrowSize.height,\n  };\n\n  const anchor = {\n    x: fromRect.x + (fromRect.width / 2) * (I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y,\n  };\n\n  return { origin, anchor, placement: 'top' };\n};\n\nconst computeBottomGeometry: ComputeGeometry = (\n  displayArea,\n  fromRect,\n  contentSize,\n  arrowSize,\n) => {\n  const origin = {\n    x: Math.min(\n      displayArea.x + displayArea.width - contentSize.width,\n      Math.max(\n        displayArea.x,\n        fromRect.x +\n          (fromRect.width - contentSize.width) / 2 -\n          (I18nManager.isRTL ? fromRect.width : 0),\n      ),\n    ),\n    y: fromRect.y + fromRect.height + arrowSize.height,\n  };\n\n  const anchor = {\n    x: fromRect.x + (fromRect.width / 2) * (I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y + fromRect.height,\n  };\n\n  return { origin, anchor, placement: 'bottom' };\n};\n\nconst computeStartGeometry: ComputeGeometry = (\n  displayArea,\n  fromRect,\n  contentSize,\n  arrowSize,\n) => {\n  const origin = {\n    x:\n      fromRect.x -\n      contentSize.width -\n      arrowSize.width -\n      (I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(\n      displayArea.y + displayArea.height - contentSize.height,\n      Math.max(\n        displayArea.y,\n        fromRect.y + fromRect.height - contentSize.height,\n      ),\n    ),\n  };\n\n  const anchor = {\n    x: fromRect.x - (I18nManager.isRTL ? fromRect.width : 0),\n    y: fromRect.y + fromRect.height - contentSize.height / 2,\n  };\n\n  return { origin, anchor, placement: 'start' };\n};\n\nconst computeEndGeometry: ComputeGeometry = (\n  displayArea,\n  fromRect,\n  contentSize,\n  arrowSize,\n) => {\n  const origin = {\n    x:\n      fromRect.x +\n      fromRect.width +\n      arrowSize.width -\n      (I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(\n      displayArea.y + displayArea.height - contentSize.height,\n      Math.max(\n        displayArea.y,\n        fromRect.y + fromRect.height - contentSize.height,\n      ),\n    ),\n  };\n\n  const anchor = {\n    x: fromRect.x + (I18nManager.isRTL ? 0 : fromRect.width),\n    y: fromRect.y + fromRect.height - contentSize.height / 2,\n  };\n\n  return { origin, anchor, placement: 'end' };\n};\n\nconst computeAutoGeometry = (\n  displayArea: Rect,\n  fromRect: Rect,\n  contentSize: Size,\n  arrowSize: Size,\n): Geometry => {\n  let geom: Geometry | null = null;\n  const placements: Placement[] = ['start', 'end', 'top', 'bottom'];\n  for (let i = 0; i < 4; i += 1) {\n    const placement = placements[i];\n    geom = computeGeometry(\n      contentSize,\n      placement,\n      fromRect,\n      displayArea,\n      arrowSize,\n    );\n    const { origin } = geom;\n\n    if (\n      origin.x >= displayArea.x &&\n      origin.x <= displayArea.x + displayArea.width - contentSize.width &&\n      origin.y >= displayArea.y &&\n      origin.y <= displayArea.y + displayArea.height - contentSize.height\n    ) {\n      break;\n    }\n  }\n  return geom as Geometry;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}